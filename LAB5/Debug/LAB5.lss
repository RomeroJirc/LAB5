
LAB5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000312  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000312  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000312  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b8  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006fa  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c0  00000000  00000000  000013ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00001870  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000400  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000120  00000000  00000000  00001d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001e80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 bc 00 	jmp	0x178	; 0x178 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  88:	0c 94 4d 01 	jmp	0x29a	; 0x29a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
	}
}
}

void initADC(void){
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	ADMUX |= (1<<ADLAR);								//JUSTIFICACIÓN A LA IZQUIERDA
  96:	80 81       	ld	r24, Z
  98:	80 62       	ori	r24, 0x20	; 32
  9a:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);								//REFERENCIA AVCC = 5V
  9c:	80 81       	ld	r24, Z
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	80 83       	st	Z, r24
	DIDR0 |= (1<<ADC0D);								//DESHABILITAR PIN DIGITAL
  a2:	ae e7       	ldi	r26, 0x7E	; 126
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	8c 91       	ld	r24, X
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	8c 93       	st	X, r24
	ADMUX |= ((1<<MUX2) | (1<<MUX1));					//AL COLOCAR 0110 INDICAMOS EL ADC6 COMO EL RECEPTOR DE LA SEÑAL ANALÓGICA
  ac:	80 81       	ld	r24, Z
  ae:	86 60       	ori	r24, 0x06	; 6
  b0:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  b2:	ea e7       	ldi	r30, 0x7A	; 122
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADIE);								//HABILITaR INTERRUPCIONES DE ADC
  b8:	80 81       	ld	r24, Z
  ba:	88 60       	ori	r24, 0x08	; 8
  bc:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);		//PRESCALER DE 128 ----> 125kHz
  be:	80 81       	ld	r24, Z
  c0:	87 60       	ori	r24, 0x07	; 7
  c2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);								//HABILITANDO EL ADC
  c4:	80 81       	ld	r24, Z
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <initTimer0>:
	
}

void initTimer0(void){
	TCCR0B |= (1<<CS02)|(1<<CS00);;				//CONFIGURAR PRESCALER DE 1024
  cc:	85 b5       	in	r24, 0x25	; 37
  ce:	85 60       	ori	r24, 0x05	; 5
  d0:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 100;								//CARGAR VALOR DE DESBORDAMIENTO
  d2:	84 e6       	ldi	r24, 0x64	; 100
  d4:	86 bd       	out	0x26, r24	; 38
	TIMSK0 |= (1 << TOIE0);
  d6:	ee e6       	ldi	r30, 0x6E	; 110
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	81 60       	ori	r24, 0x01	; 1
  de:	80 83       	st	Z, r24
  e0:	08 95       	ret

000000e2 <main>:
void initADC(void);
void initTimer0(void);

int main(void)
{
	cli();
  e2:	f8 94       	cli
	initADC();
  e4:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	initPWM1FastA(no_invertido, 1024);
  e8:	60 e0       	ldi	r22, 0x00	; 0
  ea:	74 e0       	ldi	r23, 0x04	; 4
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	0e 94 28 01 	call	0x250	; 0x250 <initPWM1FastA>
	DDRB |= (1<<DDB3);		//PIN B3 COMO SALIDA
  f2:	84 b1       	in	r24, 0x04	; 4
  f4:	88 60       	ori	r24, 0x08	; 8
  f6:	84 b9       	out	0x04, r24	; 4
	DDRD |=(1<<DDD4);		//PIN D4 COMO SALIDA
  f8:	8a b1       	in	r24, 0x0a	; 10
  fa:	80 61       	ori	r24, 0x10	; 16
  fc:	8a b9       	out	0x0a, r24	; 10
	
	//TIMER 2
	TCCR2A = 0;										//RESET
  fe:	e0 eb       	ldi	r30, 0xB0	; 176
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	10 82       	st	Z, r1
	TCCR2B = 0;										//RESET
 104:	a1 eb       	ldi	r26, 0xB1	; 177
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	1c 92       	st	X, r1
	TCCR2A |= (1<<COM2A1);							//OC1A NO INVERTIDO
 10a:	80 81       	ld	r24, Z
 10c:	80 68       	ori	r24, 0x80	; 128
 10e:	80 83       	st	Z, r24
	TCCR2A |= (1<<WGM21)|(1<<WGM20);				//MODO PWM FAST, 8 bits
 110:	80 81       	ld	r24, Z
 112:	83 60       	ori	r24, 0x03	; 3
 114:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS20)|(1<<CS21)|(1<<CS22);		//PRESCALER DE 1024
 116:	8c 91       	ld	r24, X
 118:	87 60       	ori	r24, 0x07	; 7
 11a:	8c 93       	st	X, r24
	
	initTimer0();									//LLAMAR A LA INICIALIZACIÓN DEL TIMER1
 11c:	0e 94 66 00 	call	0xcc	; 0xcc <initTimer0>
										//LLAMAR A LA INICIALIZACIÓN DEL ADC
	
	sei();
 120:	78 94       	sei
	
    while (1) 
    {
	periodo++;
 122:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 126:	8f 5f       	subi	r24, 0xFF	; 255
 128:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	OCR1A = ADCvalue1/6;
 12c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ADCvalue1>
 130:	2b ea       	ldi	r18, 0xAB	; 171
 132:	82 9f       	mul	r24, r18
 134:	81 2d       	mov	r24, r1
 136:	11 24       	eor	r1, r1
 138:	86 95       	lsr	r24
 13a:	86 95       	lsr	r24
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 142:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR2A = ADCvalue2/6;
 146:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ADCvalue2>
 14a:	82 9f       	mul	r24, r18
 14c:	81 2d       	mov	r24, r1
 14e:	11 24       	eor	r1, r1
 150:	86 95       	lsr	r24
 152:	86 95       	lsr	r24
 154:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	if (periodo==0)
 158:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15c:	81 11       	cpse	r24, r1
 15e:	04 c0       	rjmp	.+8      	; 0x168 <main+0x86>
	{
		PORTD &= ~(1<<PORTD4);
 160:	8b b1       	in	r24, 0x0b	; 11
 162:	8f 7e       	andi	r24, 0xEF	; 239
 164:	8b b9       	out	0x0b, r24	; 11
 166:	dd cf       	rjmp	.-70     	; 0x122 <main+0x40>
	}
	else if (periodo == (ADCvalue3))
 168:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ADCvalue3>
 16c:	89 13       	cpse	r24, r25
 16e:	d9 cf       	rjmp	.-78     	; 0x122 <main+0x40>
	{
		PORTD |= (1<<PORTD4);
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	80 61       	ori	r24, 0x10	; 16
 174:	8b b9       	out	0x0b, r24	; 11
 176:	d5 cf       	rjmp	.-86     	; 0x122 <main+0x40>

00000178 <__vector_16>:
	TCCR0B |= (1<<CS02)|(1<<CS00);;				//CONFIGURAR PRESCALER DE 1024
	TCNT0 = 100;								//CARGAR VALOR DE DESBORDAMIENTO
	TIMSK0 |= (1 << TOIE0);
}

ISR (TIMER0_OVF_vect){
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	8f 93       	push	r24
 184:	ef 93       	push	r30
 186:	ff 93       	push	r31
		if(suich==0)
 188:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <suich>
 18c:	81 11       	cpse	r24, r1
 18e:	0c c0       	rjmp	.+24     	; 0x1a8 <__vector_16+0x30>
		{
		suich=1;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <suich>
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
 196:	ec e7       	ldi	r30, 0x7C	; 124
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	88 7f       	andi	r24, 0xF8	; 248
 19e:	80 83       	st	Z, r24
		ADMUX |= ((1<<MUX1)|(1<<MUX2));
 1a0:	80 81       	ld	r24, Z
 1a2:	86 60       	ori	r24, 0x06	; 6
 1a4:	80 83       	st	Z, r24
 1a6:	17 c0       	rjmp	.+46     	; 0x1d6 <__vector_16+0x5e>
		}
		else if (suich==1)
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	61 f4       	brne	.+24     	; 0x1c4 <__vector_16+0x4c>
		{
		suich=2;
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <suich>
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
 1b2:	ec e7       	ldi	r30, 0x7C	; 124
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	88 7f       	andi	r24, 0xF8	; 248
 1ba:	80 83       	st	Z, r24
		ADMUX |= ((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
 1bc:	80 81       	ld	r24, Z
 1be:	87 60       	ori	r24, 0x07	; 7
 1c0:	80 83       	st	Z, r24
 1c2:	09 c0       	rjmp	.+18     	; 0x1d6 <__vector_16+0x5e>
		}
		else if (suich==2)
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	39 f4       	brne	.+14     	; 0x1d6 <__vector_16+0x5e>
		{
		suich =0;
 1c8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <suich>
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
 1cc:	ec e7       	ldi	r30, 0x7C	; 124
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	88 7f       	andi	r24, 0xF8	; 248
 1d4:	80 83       	st	Z, r24
		}

		
	ADCSRA |= (1<<ADSC);				//ADC START CONVERSION
 1d6:	ea e7       	ldi	r30, 0x7A	; 122
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	80 64       	ori	r24, 0x40	; 64
 1de:	80 83       	st	Z, r24
	TCNT0 = 100;						//CARGAR VALOR DE DESBORDAMIENTO
 1e0:	84 e6       	ldi	r24, 0x64	; 100
 1e2:	86 bd       	out	0x26, r24	; 38
	TIFR0 |= (1 << TOV0);				//APAGAR BANDERA DEL TIMER1			
 1e4:	85 b3       	in	r24, 0x15	; 21
 1e6:	81 60       	ori	r24, 0x01	; 1
 1e8:	85 bb       	out	0x15, r24	; 21
}
 1ea:	ff 91       	pop	r31
 1ec:	ef 91       	pop	r30
 1ee:	8f 91       	pop	r24
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <__vector_21>:

ISR (ADC_vect){
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	8f 93       	push	r24
 206:	ef 93       	push	r30
 208:	ff 93       	push	r31
	if(suich==0)
 20a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <suich>
 20e:	81 11       	cpse	r24, r1
 210:	05 c0       	rjmp	.+10     	; 0x21c <__vector_21+0x22>
	{
		ADCvalue1 = ADCH;					//ACTUALIZAR VALOR DEL ADC
 212:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 216:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ADCvalue1>
 21a:	0d c0       	rjmp	.+26     	; 0x236 <__vector_21+0x3c>
	}
	else if (suich==1)
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	29 f4       	brne	.+10     	; 0x22a <__vector_21+0x30>
	{
		ADCvalue2 = ADCH;					//ACTUALIZAR VALOR DEL ADC
 220:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 224:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ADCvalue2>
 228:	06 c0       	rjmp	.+12     	; 0x236 <__vector_21+0x3c>
	}
	else if (suich==2)
 22a:	82 30       	cpi	r24, 0x02	; 2
 22c:	21 f4       	brne	.+8      	; 0x236 <__vector_21+0x3c>
		{
		ADCvalue3 = ADCH;
 22e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 232:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ADCvalue3>
		}
	ADCSRA |= (1<<ADIF);				//APAGAR BANDERA DE INTERRUPCIÓN
 236:	ea e7       	ldi	r30, 0x7A	; 122
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	80 61       	ori	r24, 0x10	; 16
 23e:	80 83       	st	Z, r24
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	8f 91       	pop	r24
 246:	0f 90       	pop	r0
 248:	0f be       	out	0x3f, r0	; 63
 24a:	0f 90       	pop	r0
 24c:	1f 90       	pop	r1
 24e:	18 95       	reti

00000250 <initPWM1FastA>:

#include "PWM1.h"


void initPWM1FastA(uint8_t inverted, uint16_t prescaler){
	DDRB |= (1<<DDB1);		//PIN B1 COMO SALIDA
 250:	94 b1       	in	r25, 0x04	; 4
 252:	92 60       	ori	r25, 0x02	; 2
 254:	94 b9       	out	0x04, r25	; 4
	//TIMER 1
	TCCR1A = 0;							//RESET
 256:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;							//RESET
 25a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	if(inverted){
 25e:	88 23       	and	r24, r24
 260:	31 f0       	breq	.+12     	; 0x26e <initPWM1FastA+0x1e>
		TCCR1A |= (1<<COM1A1)|(1<<COM1A0);	//OC1A INVERTIDO
 262:	e0 e8       	ldi	r30, 0x80	; 128
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	80 6c       	ori	r24, 0xC0	; 192
 26a:	80 83       	st	Z, r24
 26c:	05 c0       	rjmp	.+10     	; 0x278 <initPWM1FastA+0x28>
	}else{
		TCCR1A |= (1<<COM1A1);				//OC1A NO INVERTIDO	
 26e:	e0 e8       	ldi	r30, 0x80	; 128
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	80 68       	ori	r24, 0x80	; 128
 276:	80 83       	st	Z, r24
	}
	
	TCCR1A |= (1<<WGM10);				//MODO PWM FAST, 8 bits
 278:	e0 e8       	ldi	r30, 0x80	; 128
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	81 60       	ori	r24, 0x01	; 1
 280:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12);				//MODO PWM FAST, 8 bits
 282:	e1 e8       	ldi	r30, 0x81	; 129
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	88 60       	ori	r24, 0x08	; 8
 28a:	80 83       	st	Z, r24
	if(prescaler==1024){
 28c:	61 15       	cp	r22, r1
 28e:	74 40       	sbci	r23, 0x04	; 4
 290:	19 f4       	brne	.+6      	; 0x298 <initPWM1FastA+0x48>
	TCCR1B |= (1<<CS12)|(1<<CS10);		//PRESCALER DE 1024	
 292:	80 81       	ld	r24, Z
 294:	85 60       	ori	r24, 0x05	; 5
 296:	80 83       	st	Z, r24
 298:	08 95       	ret

0000029a <_exit>:
 29a:	f8 94       	cli

0000029c <__stop_program>:
 29c:	ff cf       	rjmp	.-2      	; 0x29c <__stop_program>
